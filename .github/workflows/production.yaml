name: "production"

on:
  pull_request:
    branches:
      - main

jobs:
  retag-container:
    name: Retag Container Image
    runs-on: self-hosted
    environment: production

    outputs:
      IMAGE_DEST: ${{ steps.retag.outputs.IMAGE_DEST }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub or your container registry
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Retag Container Image
        id: retag
        working-directory: ./manifest/dev
        run: |
          IMAGE_SOURCE=$(yq eval '.spec.template.spec.containers[0].image' deployment.yaml)
          docker pull $IMAGE_SOURCE

          IMAGE_DEST=${{ vars.APP_IMAGE }}:$GITHUB_RUN_NUMBER
          docker tag $IMAGE_SOURCE $IMAGE_DEST
          docker push $IMAGE_DEST

          echo "::set-output name=IMAGE_DEST::$IMAGE_DEST"

      - name: Set up Kube Config
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          mkdir -p $HOME/.kube
          mv kubeconfig $HOME/.kube/config

      - name: Set KUBE_CONTEXT
        run: |
          # echo "KUBE_CONTEXT=${{ secrets.KUBE_CONTEXT }}" >> $GITHUB_ENV
          kubectl config use-context "${{ secrets.KUBE_CONTEXT }}"

      - name: Update Deployment to k8s
        working-directory: ./manifest/prod
        env:
          IMAGE_TOCHANGE: ${{ steps.retag.outputs.IMAGE_DEST }}
        run: |
          yq -i '.spec.template.spec.containers[0].image = strenv(IMAGE_TOCHANGE)' deployment.yaml
          kubectl apply -f deployment.yaml -n ${{ vars.KUBE_NAMESPACE }}

      - name: Commit and push changes
        working-directory: ./manifest/prod
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add deployment.yaml
          git commit -m "bot: update deployment ${{ github.sha }}"
          git push origin main
